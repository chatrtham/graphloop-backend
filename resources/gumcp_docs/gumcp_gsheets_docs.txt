# Gsheets guMCP Tools Documentation

*Generated on: 2025-10-22 02:27:58*

## Available Tools (10 total)

### 1. create-sheet
- **Description**: Create a new Google Sheets
- **Parameters Schema**:
```json
{
  "title": {
    "type": "string",
    "description": "The title of the new spreadsheet"
  },
  "sheets": {
    "type": "array",
    "description": "The sheets that should be created with the spreadsheet (optional)",
    "items": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the sheet"
        }
      }
    }
  },
  "locale": {
    "type": "string",
    "description": "The locale of the new spreadsheet (e.g., 'en_US') (optional)"
  },
  "timeZone": {
    "type": "string",
    "description": "The time zone of the new spreadsheet (e.g., 'America/New_York') (optional)"
  },
  "properties": {
    "type": "object",
    "description": "Additional properties for the spreadsheet (optional)"
  }
}
```

### 2. get-spreadsheet-info
- **Description**: Get spreadsheet metadata
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  },
  "include_grid_data": {
    "type": "boolean",
    "description": "Whether to include grid data in the response (optional)"
  },
  "ranges": {
    "type": "array",
    "description": "The ranges to retrieve from the spreadsheet (optional)",
    "items": {
      "type": "string"
    }
  },
  "include_filter_views": {
    "type": "boolean",
    "description": "Whether to include filter views in the response (optional)"
  }
}
```

### 3. get-sheet-names
- **Description**: List sheet names in spreadsheet
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  }
}
```

### 4. batch-get
- **Description**: Get values from multiple ranges
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  },
  "ranges": {
    "type": "array",
    "description": "The ranges to retrieve from the spreadsheet (e.g. 'Sheet1!A1:C10')",
    "items": {
      "type": "string"
    }
  },
  "major_dimension": {
    "type": "string",
    "description": "The major dimension of the values (optional, default: 'ROWS')",
    "enum": [
      "ROWS",
      "COLUMNS"
    ]
  },
  "value_render_option": {
    "type": "string",
    "description": "How values should be rendered in the output (optional)",
    "enum": [
      "FORMATTED_VALUE",
      "UNFORMATTED_VALUE",
      "FORMULA"
    ]
  },
  "date_time_render_option": {
    "type": "string",
    "description": "How dates, times, and durations should be represented (optional)",
    "enum": [
      "SERIAL_NUMBER",
      "FORMATTED_STRING"
    ]
  }
}
```

### 5. batch-update
- **Description**: Update values in multiple ranges
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  },
  "data": {
    "type": "array",
    "description": "The data to update in the spreadsheet",
    "items": {
      "type": "object",
      "properties": {
        "range": {
          "type": "string",
          "description": "The range to update (e.g. 'Sheet1!A1:C10')"
        },
        "values": {
          "type": "array",
          "description": "The values to update",
          "items": {
            "type": "array",
            "items": {}
          }
        },
        "majorDimension": {
          "type": "string",
          "description": "The major dimension of the values (optional, default: 'ROWS')",
          "enum": [
            "ROWS",
            "COLUMNS"
          ]
        }
      },
      "required": [
        "range",
        "values"
      ]
    }
  },
  "value_input_option": {
    "type": "string",
    "description": "How the input data should be interpreted (optional, default: 'RAW')",
    "enum": [
      "RAW",
      "USER_ENTERED"
    ]
  },
  "include_values_in_response": {
    "type": "boolean",
    "description": "Whether to include values in the response (optional)"
  },
  "response_value_render_option": {
    "type": "string",
    "description": "How values should be rendered in the response (optional)",
    "enum": [
      "FORMATTED_VALUE",
      "UNFORMATTED_VALUE",
      "FORMULA"
    ]
  },
  "response_date_time_render_option": {
    "type": "string",
    "description": "How dates, times, and durations should be represented in the response (optional)",
    "enum": [
      "SERIAL_NUMBER",
      "FORMATTED_STRING"
    ]
  }
}
```

### 6. append-values
- **Description**: Append values to a sheet
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  },
  "range": {
    "type": "string",
    "description": "The range to append to (e.g. 'Sheet1!A1')"
  },
  "values": {
    "type": "array",
    "description": "The values to append",
    "items": {
      "type": "array",
      "items": {}
    }
  },
  "value_input_option": {
    "type": "string",
    "description": "How the input data should be interpreted (optional, default: 'RAW')",
    "enum": [
      "RAW",
      "USER_ENTERED"
    ]
  },
  "insert_data_option": {
    "type": "string",
    "description": "How the input data should be inserted (optional)",
    "enum": [
      "OVERWRITE",
      "INSERT_ROWS"
    ]
  },
  "include_values_in_response": {
    "type": "boolean",
    "description": "Whether to include values in the response (optional)"
  },
  "response_value_render_option": {
    "type": "string",
    "description": "How values should be rendered in the response (optional)",
    "enum": [
      "FORMATTED_VALUE",
      "UNFORMATTED_VALUE",
      "FORMULA"
    ]
  },
  "response_date_time_render_option": {
    "type": "string",
    "description": "How dates, times, and durations should be represented in the response (optional)",
    "enum": [
      "SERIAL_NUMBER",
      "FORMATTED_STRING"
    ]
  }
}
```

### 7. lookup-row
- **Description**: Find a row by value in a column
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  },
  "range": {
    "type": "string",
    "description": "The range to search within (e.g. 'Sheet1!A1:C10')"
  },
  "value": {
    "type": "string",
    "description": "The value to search for"
  },
  "column_index": {
    "type": "integer",
    "description": "The specific column index to search within (optional, 0-based)"
  },
  "exact_match": {
    "type": "boolean",
    "description": "Whether to require an exact match (optional, default: true)"
  }
}
```

### 8. clear-values
- **Description**: Clear a sheet range
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "The URL of the Google Sheets document"
  },
  "range": {
    "type": "string",
    "description": "The range to clear (e.g. 'Sheet1!A1:C10')"
  }
}
```

### 9. copy-sheet
- **Description**: Copy a sheet from one spreadsheet to another
- **Parameters Schema**:
```json
{
  "source_spreadsheet_id": {
    "type": "string",
    "description": "The ID of the spreadsheet containing the sheet to copy"
  },
  "source_sheet_id": {
    "type": "integer",
    "description": "The ID of the sheet to copy"
  },
  "destination_spreadsheet_id": {
    "type": "string",
    "description": "The ID of the spreadsheet to copy the sheet to"
  },
  "new_sheet_name": {
    "type": "string",
    "description": "Optional name for the copied sheet"
  },
  "insert_sheet_index": {
    "type": "integer",
    "description": "The zero-based index where the new sheet should be inserted (optional)"
  }
}
```

### 10. add-sheet
- **Description**: Add a new sheet to an existing spreadsheet
- **Parameters Schema**:
```json
{
  "spreadsheet_url": {
    "type": "string",
    "description": "URL of the target spreadsheet"
  },
  "new_sheet": {
    "type": "object",
    "description": "The `properties` object for an AddSheetRequest \u2014 at minimum give a `title`, but you can include any sheet-level fields the API accepts.",
    "properties": {
      "title": {
        "type": "string",
        "description": "Tab name"
      },
      "index": {
        "type": "integer",
        "description": "0-based position (optional)"
      },
      "hidden": {
        "type": "boolean",
        "description": "Start hidden? (optional)"
      },
      "gridProperties": {
        "type": "object",
        "description": "Row/column counts etc. (optional)"
      },
      "tabColor": {
        "type": "object",
        "description": "RGB 0\u20131 for tab colour (optional)"
      }
    }
  }
}
```

